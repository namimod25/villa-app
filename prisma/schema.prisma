// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Room {
  id            String          @id @default(cuid())
  name          String
  description   String
  image         String
  role          String          @default("user")
  price         Int
  capacity      Int             @default(1)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Reservation   Reservation[]
  RoomAmenities RoomAmenities[]
}

model Amenities {
  id            String          @id @default(cuid()) //tabel amenities master
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  RoomAmenities RoomAmenities[]
}

model RoomAmenities {
  id          String    @id @default(cuid())
  roomId      String
  amenitiesId String
  Amenities   Amenities @relation(fields: [amenitiesId], references: [id], onDelete: Cascade)
  Room        Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Reservation {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  price     Int
  userId    String
  roomId    String
  Room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Payment   payment?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model payment {
  id            String      @id @default(cuid())
  method        String?
  amount        Int
  status        String      @default("unpaid")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  reservationId String      @unique //relasasion one to one
  Reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String        @default("user")
  phone         String?
  accounts      Account[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Reservations  Reservation[]

  Session Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}
